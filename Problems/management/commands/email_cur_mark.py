from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.conf import settings
from django.db import IntegrityError

from Problems.models import StudentInfo, StudentMark, StudentDocument, Exemption
import sympy

class Command(BaseCommand):
    def add_arguments(self, parser):
        # gradescheme should be a formula for evaluating the current grade. Uses
        # sympy's evalf.
        parser.add_argument('gradescheme')
        parser.add_argument('options')

    def handle(self, *args, **options):
        with open(options['gradescheme']) as scheme:
            formula = scheme.read()

        formula = sympy.sympify(formula)

        subject_line = "{site_name} Current Mark Update".format(site_name=settings.SITE_NAME)
        # Body needs:
        # first_name, last_name: of student
        # marks: a table of the marks, autogenerated
        # current_grade: The current overall grade
        body         = """
Dear {first_name} {last_name},

This is an automatically generated email. According to our records, your marks
are as follows:

    {marks}

Your current grade in the course is {current_grade}. Note that if you have
exemptions, the above grade will not be accurate, and you should compute the
grade yourself using the grading schema available in the syllabus. There will be
no adjustments to the marks, so this is your absolute grade.

For your information, the drop deadline for our course is {drop_deadline}. If
you would like to discuss your options in the course, please contact the course
administrator.

All the best,
The {site_name} Instructors"""

        # Get all the students:
        students = User.objects.filter(is_staff=False)

        # Get the list of exemptions and turn them into sympy variables
        

        for student in students:
            try:
                # Get the student marks so we can create the grade table and
                # compute the current mark
                marks = student.marks.select_related(category).all():

                mark_table = create_marks_table(student,marks)

                cur_grade = compute_current_grade(student,marks)

#                cat_names = [cat.name.replace(' ','') for 
#                                cat in ExemptionsType.objects.all()]


                # Now send the email
                custom_message = body.format(username = username, 
                                             password = rpass, 
                                             site_name= settings.SITE_NAME,
                                             site_url = settings.SITE_URL)

                send_mail(subject_line, custom_message, "tholden@math.toronto.edu", [email])

                print('Email sent to {first} {last} with username: {username} at {email}'.format(first=first_name, last=last_name,username=username, email=email))
            except Exception as e:
                print(e)
                print('ERROR: {first} {last} with username: {username} at {email}. \n Exception: {e}'.format(first=first_name, last=last_name, username=username, email=email, e=e))


    def create_marks_table(student, marks):
        # Input: (django.contrib.auth.model.User) student
        #      : (Problem.models.StudentMarks) list of marks
        # Out  : Simple txt version of the student marks
        #
        # Iterates through the list of marks. Checks to see if the student
        # submitted a note to be exempted and indicates as such. Otherwise,
        # simply lists out a table, separated by carriage returns, of the scores

        template = "{name}: {score}"
        mark_table = ''
        exemptions = student.studentdocument_set.all()

        for mark in marks:
            # If the student submitted a note
            note = exemptions.filter(exemption=mark.category)[0]
            if note:
                accepted = 'True' if note.accepted else 'False'
                mark_table += template.format(
                        mark.category.name,
                        'Note Submitted: Accepted = ' + accepted)
            else:
                mark_table += template.format(
                        mark.category.name,
                        mark.category.score)

            mark_table += "\n"

        return mark_table

    def compute_current_grade(student, marks):
        # Input: (django.contrib.auth.model.User) student
        #      : (Problem.models.StudentMarks) list of marks
        #      : (sympy formula) formula
        # Out  : Simple txt version of the student marks
        #
        # Uses a user-defined formula to compute the current grade
        #
        # TODO: Clean this up and make it dynamic

        qScore  = marks.filter(
                    category__name__startswith="Quiz").aggregate(Sum('score'))
        tScores = marks.
                    filter(category__name__startswith="Term").
                    order_by('score').
                    values_list('score',flat=True)
        cra     = marks.get(category__name="CRA")

        # Each quiz is currently 1%, tests are 9% min and 12 otherwise, and CRA
        # is 5%. 
        
        tScore = tScores[0]/100*9 + tScores[1]/100*12 + tScores[2]/100*12

        cur_score = round(100*(qScore['score_sum']/40*8 + tScore +
                            cra/100*5)/46)

        return cur_score
